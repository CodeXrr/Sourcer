#include <stdio.h>
#include <stdlib.h>
#include <unistd.h> 
#include <string.h>
#include <fcntl.h>
#include <sys/stat.h>

int get_file_size(char *filename) {
	int fd;
	long byte_count=0;
	unsigned char byte;

	fd = open(filename, O_RDONLY); 

	while(read(fd, &byte, 1) == 1) {
		byte_count++;
//		printf("lseek: %ld\n", lseek(fd, 0, SEEK_CUR)); 
	}
//	printf("BYTE COUNT: %ld\n", byte_count); 
	close(fd); 
	return byte_count;
}

int check_comment(char byte, int fd, int *line_count) {
	off_t enter_offset = lseek(fd, 0, SEEK_CUR);
	int comment_count = 0; 

	if(byte == '/') { 
		printf(" -- hit comment char activation\n");
		read(fd, &byte, 1);
		printf("offset: %ld | %c ", lseek(fd, 0, SEEK_CUR), byte); 
		if (byte == '/') {
			printf(" [FOUND]--comment: '//' | line: %d\n", *line_count); 
			while(byte != '\n') {
				read(fd, &byte, 1);
				comment_count++; 
				printf("offset: %ld -READING COOMMENT: %c\n", lseek(fd, 0, SEEK_CUR), byte);  

			}
			printf("DONE READING COMMENT: line_count before-- %d\n", *line_count); 
			printf("CommentSize: %d\n", comment_count); 
			(*line_count) += 1;
			printf("line_count after update-- %d\n", *line_count); 
			return 1;
		}
		if (byte == '*') {
			comment_count += 1; 			
			printf("[FOUND]--comment: '/*' | line: %d\n", *line_count); 
			return 1;
		}
		else { 
			lseek(fd, enter_offset, SEEK_SET);
			printf(" [COMMENT TEST FAIL] returning @ offset: %ld\n", lseek(fd, 0, SEEK_CUR));
			return 0;
		}
	}
	else {
		printf("\n"); 
	}
}
int is_whitespace(char byte) {
	if(byte == ' ')
		return 1;
	else
		return 0; 
}
int is_newline(char byte) {
	if(byte == '\n')
		return 1;
	else 
		return 0; 
}


int scanfile(char *filename) {
	int fd, line_count=1;
	long file_size;
	unsigned char byte = '\x41';

	file_size = get_file_size(filename); 

	fd = open(filename, O_RDONLY); 
	if(fd == -1) {
		printf("ERROR OPENING FILE \'%s\'\n", filename); 
		exit(-1); 
	}

	// MAIN ENGINE
	// ----------------------------------------------------------------
   	for(off_t file_offset=1; file_offset != file_size; file_offset++) {	
		if(read(fd, &byte, 1) == 0) { // If we read 0 bytes. print sum.
			printf("offset: %ld | [ERROR] did not read byte.\n", file_offset);
			return -1; 
		}
		printf("offset: %ld | %c", file_offset, byte);
		//printf("\nlseek (sync): %ld\n------s--y--n--c\n", lseek(fd, 0, SEEK_CUR)); 

		if(is_newline(byte)) {
			line_count++;
			continue;
		}
		
		if(check_comment(byte, fd, &line_count))
		{
			// UPDATE : file_offset
			file_offset = lseek(fd, 0, SEEK_CUR); 
			continue;
		}
		

	}
	// THIS MESSEAGE CAN BE ABSTRACTED! CLEANCODE
	printf("=======================================\n");
	printf("DONE SCANNING | (MAIN ENGINE)"); 
	printf("----------------------------------------\n"); 
	printf("|summary|\nlineCOUNT: %d\n", line_count); 
	printf("lseek(SEEK_CUR) ended on: %ld\n", lseek(fd, 0, SEEK_CUR)); 
		
	close(fd); 

	
}

int main(int argc, char *argv[]) {
	if(argc < 2) {
		printf("Usage: %s <srcfile.[ch]>\n", argv[0]);
		exit(0);
	}

	scanfile(argv[1]);

};
